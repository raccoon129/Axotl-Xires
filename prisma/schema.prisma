// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario      Int       @id @default(autoincrement())
  correo          String    @unique
  contrasena_hash String
  nombre          String
  rol             Rol
  foto_perfil     String?
  nombramiento    String?
  fecha_creacion  DateTime  @default(now())
  ultimo_acceso   DateTime?

  publicaciones        Publicacion[]
  comentarios          Comentario[]
  comentariosRevision  ComentarioRevision[]
  favoritos            Favorito[]
  notificaciones       Notificacion[]
  revisiones           Revision[]
  bitacorasEstudio     BitacoraEstudio[]

  @@map("usuarios")
}

model Publicacion {
  id_publicacion   Int       @id @default(autoincrement())
  id_usuario       Int
  id_tipo          Int
  titulo           String
  resumen          String    @db.Text
  contenido        String    @db.Text
  estado           Estado
  imagen_portada   String?
  es_privada       Boolean   @default(false)
  fecha_creacion   DateTime  @default(now())
  fecha_publicacion DateTime?
  eliminado        Boolean   @default(false)
  fecha_eliminacion DateTime?

  usuario          Usuario           @relation(fields: [id_usuario], references: [id_usuario])
  tipo             TipoPublicacion   @relation(fields: [id_tipo], references: [id_tipo])
  comentarios      Comentario[]
  favoritos        Favorito[]
  multimedia       MultimediaPublicacion[]
  revisiones       Revision[]
  bitacorasEstudio BitacoraEstudio[]

  @@index([estado])
  @@index([fecha_publicacion])
  @@map("publicaciones")
}

model TipoPublicacion {
  id_tipo     Int       @id @default(autoincrement())
  nombre      String
  descripcion String?   @db.Text

  publicaciones Publicacion[]

  @@map("tipos_publicacion")
}

model Comentario {
  id_comentario  Int       @id @default(autoincrement())
  id_usuario     Int
  id_publicacion Int
  contenido      String    @db.Text
  fecha_creacion DateTime  @default(now())

  usuario     Usuario     @relation(fields: [id_usuario], references: [id_usuario])
  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion])

  @@index([id_publicacion])
  @@map("comentarios")
}

model ComentarioRevision {
  id_comentario  Int       @id @default(autoincrement())
  id_revision    Int
  id_usuario     Int
  contenido      String    @db.Text
  fecha_creacion DateTime  @default(now())

  revision    Revision    @relation(fields: [id_revision], references: [id_revision])
  usuario     Usuario     @relation(fields: [id_usuario], references: [id_usuario])

  @@map("comentarios_revision")
}

model Favorito {
  id_favorito    Int       @id @default(autoincrement())
  id_usuario     Int
  id_publicacion Int
  fecha_creacion DateTime  @default(now())

  usuario     Usuario     @relation(fields: [id_usuario], references: [id_usuario])
  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion])

  @@index([id_usuario])
  @@map("favoritos")
}

model MultimediaPublicacion {
  id_imagen      Int       @id @default(autoincrement())
  id_publicacion Int
  url            String
  descripcion    String?
  orden          Int       @default(0)
  fecha_creacion DateTime  @default(now())

  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)

  @@map("multimedia_publicacion")
}

model Notificacion {
  id_notificacion Int       @id @default(autoincrement())
  id_usuario      Int
  tipo            String
  contenido       String
  leida           Boolean   @default(false)
  notificar_correo Boolean  @default(true)
  fecha_creacion  DateTime  @default(now())

  usuario Usuario @relation(fields: [id_usuario], references: [id_usuario])

  @@index([id_usuario])
  @@map("notificaciones")
}

model Revision {
  id_revision    Int       @id @default(autoincrement())
  id_publicacion Int
  id_revisor     Int
  aprobado       Boolean?
  fecha_creacion DateTime  @default(now())
  id_tipo_revision Int?

  publicacion    Publicacion    @relation(fields: [id_publicacion], references: [id_publicacion])
  revisor        Usuario        @relation(fields: [id_revisor], references: [id_usuario])
  tipoRevision   TipoRevision?  @relation(fields: [id_tipo_revision], references: [id_tipo_revision])
  comentarios    ComentarioRevision[]

  @@index([id_publicacion])
  @@map("revisiones")
}

model TipoRevision {
  id_tipo_revision    Int       @id @default(autoincrement())
  tipo_revision       String
  descripcion_revision String?

  revisiones Revision[]

  @@map("tipo_revision")
}

model BitacoraEstudio {
  id_bitacora    Int       @id @default(autoincrement())
  id_usuario     Int
  id_publicacion Int
  notas          String?   @db.Text
  titulo_publicacion String?
  contenido_extracto String? @db.Text
  fecha_creacion DateTime  @default(now())

  usuario     Usuario     @relation(fields: [id_usuario], references: [id_usuario])
  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion])

  @@map("bitacora_estudio")
}

enum Rol {
  sin_registro
  registrado
  revisor
  moderador
  administrador
}

enum Estado {
  borrador
  en_revision
  publicado
  rechazado
}